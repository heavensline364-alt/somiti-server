const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const axios = require("axios");
const app = express();

app.use(cors());
require("dotenv").config();

// ===== Middleware =====

app.use(express.json());

// ===== MongoDB Connection =====
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
.then(() => console.log("‚úÖ MongoDB Connected"))
.catch(err => console.error("‚ùå MongoDB Connection Error:", err));

/* ===================================================
   =============== Member Schema =====================
   =================================================== */
const memberSchema = new mongoose.Schema({
  role: { type: String, enum: ["member", "agent"], required: true }, // ‡¶®‡¶§‡ßÅ‡¶® field
  memberId: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  mobileNumber: { type: String, required: true },
  address: { type: String },
  nidNumber: { type: String },
  fatherOrHusband: { type: String },
  guarantor: { type: String },       // member only
  nomineeName: { type: String },     // member only
  nomineeFather: { type: String },        // ‚úÖ ‡¶®‡¶§‡ßÅ‡¶®
  nomineeMobile: { type: String },   // member only
  nomineeRelation: { type: String }, // member only
  nomineeNidNumber: { type: String },     // ‚úÖ ‡¶®‡¶§‡ßÅ‡¶®
  password: { type: String },
  status: { type: String, default: "active" },
  createdAt: { type: Date, default: Date.now },

  // Images
  memberImage: { type: String },
  nomineeImage: { type: String },       // member only
  nidFront: { type: String },
  nidBack: { type: String },
  nomineeNidFront: { type: String },    // member only
  nomineeNidBack: { type: String },     // member only
  agentAccessList: {
    type: [String],  // array of string
    default: [],     // ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶§‡ßá ‡¶´‡¶æ‡¶Å‡¶ï‡¶æ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
  },
});



const Member = mongoose.model("Member", memberSchema);

/* ===================================================
   =============== Loan Schema =======================
   =================================================== */


const loanSchema = new mongoose.Schema({
  member: { type: mongoose.Schema.Types.ObjectId, ref: "Member", required: true }, // MongoDB relation
  memberId: { type: String, required: true }, // Member ‡¶è‡¶∞ customId ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßá ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßã
name: { type: String, required: true },
  initialLoanAmount: { type: Number, required: true },
  totalLoan: { type: Number, required: true },
  dividend: { type: Number, required: true },
  dividendType: { type: String, required: true },
  installmentType: { type: String, required: true },
  installments: { type: Number, required: true },
  installmentAmount: { type: Number, required: true },
  description: { type: String },
  sendSMS: { type: Boolean, default: false },
  loanDate: { type: Date, required: true },
  createdAt: { type: Date, default: Date.now },
  collections: [
    {
      amount: { type: Number, required: true },
      description: { type: String },
      collectionDate: { type: Date, default: Date.now },
      sendSMS: { type: Boolean, default: false },
    }
  ]
});


const Loan = mongoose.model("Loan", loanSchema);


// üîπ SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
async function sendSms(phone, message) {
  try {
    const url = `https://sms.mszahid.com/services/send.php?key=${process.env.SMS_API_KEY}&number=${phone}&message=${encodeURIComponent(
      message
    )}&option=2&type=sms&useRandomDevice=1&prioritize=0`;

    const res = await axios.get(url);
    console.log(" SMS Sent:", res.data);
    return { success: true, response: res.data };
  } catch (err) {
    console.error("‚ùå SMS send error:", err.message);
    return { success: false, error: err.message };
  }
}


// Login Route (no password hashing, simple check)
app.post("/api/login", async (req, res) => {
  const { mobileNumber, password } = req.body;

  try {
    // ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶ú‡ßá ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
    const user = await Member.findOne({ mobileNumber, password });

    if (!user) {
      return res.status(401).json({ message: "‚ùå ‡¶≠‡ßÅ‡¶≤ ‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞ ‡¶¨‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶°!" });
    }

    // Simple success response (no JWT)
    res.json({
      success: true,
      message: "‚úÖ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡ßü‡ßá‡¶õ‡ßá!",
      user: {
        img:user.memberImage,
        _id: user.memberId,
        name: user.name,
        role: user.role,
        mobileNumber: user.mobileNumber,
        agentAccessList: user.agentAccessList
      },
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});




/* ===================================================
   =============== Member API ========================
   =================================================== */
// POST Member Create
app.post("/api/members", async (req, res) => {
  try {
    const data = req.body;
    

    // agent ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ field remove ‡¶¨‡¶æ ignore ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã
    if (data.role === "agent") {
      data.guarantor = undefined;
      data.nomineeName = undefined;
      data.nomineeMobile = undefined;
      data.nomineeRelation = undefined;
      data.nomineeImage = undefined;
      data.nomineeNidFront = undefined;
      data.nomineeNidBack = undefined;
    }

    const member = new Member(data);
    const result = await member.save();
    res.json({ message: "Member Created", member: result });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message || "Server Error" });
  }
});


//  routes/members.js for create last member id create
app.get("/api/members/last", async (req, res) => {
  try {
    const lastMember = await Member.findOne().sort({ createdAt: -1 });
    res.json({ lastMemberId: lastMember ? lastMember.memberId : "0000" });
  } catch (err) {
    res.status(500).json({ error: "Server error" });
  }
});

//for update data
app.put("/api/members/:id", async (req, res) => {
  try {
    const { id } = req.params;

    // req.body ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶¨ ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶®‡¶ø‡ßü‡ßá ‡¶®‡¶æ‡¶ì
    const {
      name,
      mobileNumber,
      address,
      nidNumber,
      fatherOrHusband,
      guarantor,
      nomineeName,
      nomineeFather,
      nomineeMobile,
      nomineeRelation,
      nomineeNidNumber,
      password,
      status,
    } = req.body;

    // Update all fields
    const updatedMember = await Member.findByIdAndUpdate(
      id,
      {
        name,
        mobileNumber,
        address,
        nidNumber,
        fatherOrHusband,
        guarantor,
        nomineeName,
        nomineeFather,
        nomineeMobile,
        nomineeRelation,
        nomineeNidNumber,
        password,
        status,
      },
      { new: true } // updated document return ‡¶ï‡¶∞‡¶¨‡ßá
    );

    if (!updatedMember) {
      return res.status(404).json({ message: "‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø" });
    }

    res.json({ message: "‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá", member: updatedMember });
  } catch (error) {
    console.error("Error updating member:", error);
    res.status(500).json({ message: "‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø!" });
  }
});



// GET All Members
app.get("/api/members", async (req, res) => {
  try {
    const members = await Member.find({ role: "member" }).sort({ createdAt: -1 });
    res.json(members);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server Error" });
  }
});
// GET All Agents OR Search by memberId/mobileNumber
app.get("/api/agent", async (req, res) => {
  try {
    const { search } = req.query;

    let query = { role: "agent" };

    // ‡¶Ø‡¶¶‡¶ø search ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá filter ‡¶ï‡¶∞‡¶¨‡ßã
    if (search) {
      query.$or = [
        { memberId: search },
        { mobileNumber: search },
      ];
    }

    const members = await Member.find(query).sort({ createdAt: -1 });
    res.json(members);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server Error" });
  }
});

// UPDATE agentAccessList by memberId
app.put("/api/agents/:memberId/access", async (req, res) => {
  try {
    const { memberId } = req.params;
    const { agentAccessList } = req.body;

    if (!agentAccessList) {
      return res.status(400).json({ message: "agentAccessList is required" });
    }

    // Update agentAccessList
    const updatedAgent = await Member.findOneAndUpdate(
      { memberId, role: "agent" },
      { agentAccessList },
      { new: true } // updated document return ‡¶ï‡¶∞‡¶¨‡ßá
    );

    if (!updatedAgent) {
      return res.status(404).json({ message: "Agent not found" });
    }

    res.json({
      message: "Access list updated successfully!",
      updatedAgent,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});

// GET agent access by memberId
app.get("/api/agent/:memberId", async (req, res) => {
  try {
    const { memberId } = req.params;
    const agent = await Member.findOne({ memberId, role: "agent" });

    if (!agent) {
      return res.status(404).json({ message: "Agent not found" });
    }

    res.json({ agentAccessList: agent.agentAccessList || [] });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});


/* ===================================================
   =============== Loan API ==========================
   =================================================== */
// POST Loan Create (Loan Form)
app.post("/api/loans", async (req, res) => {
  try {
    const {
      memberId,
      loanAmount,
      dividend,
      dividendType,
      installmentType,
      installments,
      description,
      sendSMS,
      date,
    } = req.body;

    // ‚úÖ Member ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ
    const member = await Member.findOne({ memberId });
    if (!member) {
      return res.status(404).json({ error: "Member not found" });
    }

    const loanAmountNum = Number(loanAmount) || 0;
    const dividendNum = Number(dividend) || 0;
    const installmentsNum = Number(installments) || 0;

    // ‚úÖ Total Loan ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨
    let totalLoan =
      dividendType === "%"
        ? loanAmountNum + (loanAmountNum * dividendNum) / 100
        : loanAmountNum + dividendNum;

    const installmentAmount = installmentsNum
      ? totalLoan / installmentsNum
      : 0;

    // ‚úÖ Loan Date ‡¶∂‡ßÅ‡¶ß‡ßÅ Date (BD timezone)
    const loanDate = date ? new Date(date) : new Date();
    const bdLoanDate = new Date(loanDate.toLocaleDateString("en-CA") + "T00:00:00");

    // ‚úÖ Loan ‡¶§‡ßà‡¶∞‡¶ø
    const loanDoc = new Loan({
      member: member._id,
      memberId: member.memberId,
      name: member.name,
      initialLoanAmount: loanAmountNum,
      totalLoan,
      dividend: dividendNum,
      dividendType,
      installmentType,
      installments: installmentsNum,
      installmentAmount,
      description,
      sendSMS,
      loanDate: bdLoanDate, // BD date-only
      collections: [],
    });

    const result = await loanDoc.save();

    // ‚úÖ SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    if (sendSMS && member.mobileNumber) {
      const message = `‡¶™‡ßç‡¶∞‡¶ø‡ßü ${member.name}, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú ${totalLoan} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶≤‡ßã‡¶® ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§`;
      const smsResult = await sendSms(member.mobileNumber, message);
      console.log("‚úÖ SMS Response:", smsResult);
    }

    res.status(201).json({
      success: true,
      message: "Loan created successfully",
      loan: result,
    });

  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server Error" });
  }
});




// get member by memberId
app.get("/api/members/:memberId", async (req, res) => {
  try {
    const member = await Member.findOne({ memberId: req.params.memberId });
    if (!member) return res.status(404).json({ error: "Member not found" });
    res.status(200).json(member);
  } catch (err) {
    res.status(500).json({ error: "Failed to fetch member" });
  }
});

// POST Loan Collection
app.post("/api/loans/collection", async (req, res) => {
  try {
    const { loanId, collectionAmount, description, sendSMS, date } = req.body;

    const loan = await Loan.findById(loanId);
    if (!loan) return res.status(404).json({ error: "Loan not found" });

    const member = await Member.findOne({ memberId: loan.memberId });
    if (!member) return res.status(404).json({ error: "Member not found" });

    // ‚úÖ Update totalLoan
    loan.totalLoan = loan.totalLoan - Number(collectionAmount);
    if (loan.totalLoan < 0) loan.totalLoan = 0;

    // ‚úÖ Collection Date ‡¶∂‡ßÅ‡¶ß‡ßÅ Date (BD timezone)
   const clientDate = date ? new Date(date) : new Date(); // ‡¶Ø‡¶¶‡¶ø date ‡¶®‡¶æ ‡¶Ü‡¶∏‡ßá fallback
const bdDateStr = clientDate.toLocaleDateString("en-CA", { timeZone: "Asia/Dhaka" });
const bdCollectionDate = new Date(bdDateStr + "T00:00:00");


    loan.collections.push({
      amount: Number(collectionAmount),
      description,
      sendSMS,
      collectionDate: bdCollectionDate
    });

    await loan.save();

    // ‚úÖ SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
    if (sendSMS && member.mobileNumber) {
      const message = `‡¶™‡ßç‡¶∞‡¶ø‡ßü ${member.name}, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶ú ${collectionAmount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡ßü‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡ßá‡¶¨‡¶æ ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§`;
      const smsResult = await sendSms(member.mobileNumber, message);
      console.log("‚úÖ SMS Response:", smsResult);
    }

    res.json({
      message: "Collection saved and Loan updated",
      loan,
      currentDue: loan.totalLoan
    });

  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server Error" });
  }
});





// GET All Loans (or filter by memberId)
app.get("/api/loans", async (req, res) => {
  try {
    const { memberId } = req.query;
    let query = {};
    if (memberId) {
      query.memberId = memberId; // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá String ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá assign
    }

    const loans = await Loan.find(query).sort({ loanDate: -1 });
    res.json(loans);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server Error" });
  }
});
// get single loan by  id for loan receipt
app.get("/api/loans/:id", async (req, res) => {
  try {
    const loan = await Loan.findById(req.params.id);
    if (!loan) return res.status(404).json({ error: "Loan not found" });
    res.status(200).json(loan);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to fetch loan" });
  }
});

// PATCH ‚Äì partial update
app.patch("/api/loans/:id", async (req, res) => {
  try {
    const loanId = req.params.id;
    const updateData = req.body; // client ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶æ data

    const updatedLoan = await Loan.findByIdAndUpdate(loanId, updateData, {
      new: true, // update ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ data return ‡¶ï‡¶∞‡¶¨‡ßá
    });

    if (!updatedLoan) return res.status(404).json({ message: "Loan not found" });

    res.json(updatedLoan);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});




// üîπ ‡¶∏‡¶ï‡¶≤ ‡¶≤‡ßã‡¶® + ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶∏‡¶æ
app.get("/api/loans-with-members", async (req, res) => {
  try {
    // Loan ‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá Member populate ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ
    const loans = await Loan.find().populate("member", "name mobileNumber memberId");

    // ‡¶∏‡¶¨ ‡¶≤‡ßã‡¶® ‡¶•‡ßá‡¶ï‡ßá data ‡¶§‡ßà‡¶∞‡¶ø
    const data = loans.flatMap((loan) => {
      // ‡¶Ø‡¶¶‡¶ø collections ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶ì ‡¶è‡¶ï‡¶ü‡¶ø default row ‡¶∞‡¶æ‡¶ñ‡¶¨‡ßá
      if (!loan.collections || loan.collections.length === 0) {
        return [{
          loanId: loan._id,
          memberId: loan.memberId,
          memberName: loan.member?.name,
          mobileNumber: loan.member?.mobileNumber,
          initialLoanAmount: loan.initialLoanAmount,
          totalLoan: loan.totalLoan,
          totalPaid: 0,
          due: loan.totalLoan,
          installments: loan.installments,
          installmentType: loan.installmentType,
          collectionDate: null,
          amount: 0,
        }];
      }

      // ‡¶Ø‡¶¶‡¶ø collections ‡¶•‡¶æ‡¶ï‡ßá, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø collection ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ row ‡¶π‡¶¨‡ßá
      return loan.collections.map((c) => {
        const totalPaid = loan.collections.reduce((sum, item) => sum + (item.amount || 0), 0);
        const due = loan.totalLoan - totalPaid;

        return {
          loanId: loan._id,
          memberId: loan.memberId,
          memberName: loan.member?.name,
          mobileNumber: loan.member?.mobileNumber,
          initialLoanAmount: loan.initialLoanAmount,
          totalLoan: loan.totalLoan,
          totalPaid,
          due,
          installments: loan.installments,
          installmentType: loan.installmentType,
          collectionDate: c.collectionDate,
          amount: c.amount,
        };
      });
    });

    res.json(data);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});


// PUT or PATCH route 
app.patch("/api/update-loan/:loanId", async (req, res) => {
  try {
    const { loanId } = req.params;
    const updateData = req.body;

    const updatedLoan = await Loan.findByIdAndUpdate(
      loanId,
      updateData,
      { new: true } // return updated document
    );

    res.json(updatedLoan);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});



// Helper function: installment interval
function getIntervalDays(type) {
  switch (type) {
    case "‡¶¶‡ßà‡¶®‡¶ø‡¶ï": return 1;
    case "‡¶∏‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶ø‡¶ï": return 7;
    case "‡¶™‡¶æ‡¶ï‡ßç‡¶∑‡¶ø‡¶ï": return 15;
    case "‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï": return 30;
    case "‡ß¨-‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï": return 180;
    default: return 0;
  }
}

// ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø
app.get("/api/today-installments", async (req, res) => {
  try {
    // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ BD timezone ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ
    const now = new Date();
    const bdTodayStr = now.toLocaleDateString("en-CA", { timeZone: "Asia/Dhaka" });
    const bdToday = new Date(bdTodayStr + "T00:00:00");

    const loans = await Loan.find().populate("member", "name mobileNumber memberId");

    const dueToday = [];

    loans.forEach((loan) => {
      const interval = getIntervalDays(loan.installmentType);
      if (!interval) return;

      // Loan date BD timezone ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ
      const loanDateBDStr = new Date(loan.loanDate).toLocaleDateString("en-CA", { timeZone: "Asia/Dhaka" });
      const bdLoanDate = new Date(loanDateBDStr + "T00:00:00");

      for (let i = 0; i < loan.installments; i++) {
        const instDate = new Date(bdLoanDate);
        instDate.setDate(bdLoanDate.getDate() + interval * i);

        // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá compare
        if (instDate.getTime() === bdToday.getTime()) {
          dueToday.push({
            memberName: loan.member?.name,
            mobileNumber: loan.member?.mobileNumber,
            memberId: loan.memberId,
            loanId: loan._id,
            installmentAmount: Number(loan.installmentAmount).toFixed(2),
            installmentNo: i + 1,
            totalLoan: loan.totalLoan,
            date: instDate.toLocaleDateString("en-CA", { timeZone: "Asia/Dhaka" }),
            type: loan.installmentType,
          });
        }
      }
    });

    res.json(dueToday);

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});




// ‡¶∏‡¶¨ ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø (future + past) popup
app.get("/api/member-installments/:memberId", async (req, res) => {
  try {
    const { memberId } = req.params;
    const loans = await Loan.find({ memberId }).lean();
    if (!loans.length) return res.json([]);

    let allInstallments = [];

    loans.forEach((loan) => {
      const { loanDate, installments, installmentAmount, installmentType, _id } = loan;
      const interval = getIntervalDays(installmentType);
      if (!interval) return;

      const startDate = new Date(loanDate);

      for (let i = 0; i < installments; i++) {
        const instDate = new Date(startDate);
        instDate.setDate(startDate.getDate() + interval * i);

        allInstallments.push({
          loanId: _id,
          memberId,
          installmentNo: i + 1,
          installmentAmount: Number(installmentAmount).toFixed(2),
          date: instDate.toISOString().split("T")[0],
          type: installmentType,
        });
      }
    });

    res.json(allInstallments);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});


// utils function
function getIntervalDays(type) {
  switch (type) {
    case "‡¶¶‡ßà‡¶®‡¶ø‡¶ï": return 1;
    case "‡¶∏‡¶æ‡¶™‡ßç‡¶§‡¶æ‡¶π‡¶ø‡¶ï": return 7;
    case "‡¶™‡¶æ‡¶ï‡ßç‡¶∑‡¶ø‡¶ï": return 15;
    case "‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï": return 30;
    case "‡ß¨-‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï": return 180;
    default: return 0;
  }
}

// Overdue Installments API ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶Æ‡ßá‡ßü‡¶æ‡¶¶ ‡¶â‡¶§‡ßç‡¶§‡ßÄ‡¶∞‡ßç‡¶£ - ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø

app.get("/api/overdue-installments", async (req, res) => {
  try {
    const today = new Date();
    const bdToday = new Date(today.toLocaleDateString("en-CA") + "T00:00:00");

    const loans = await Loan.find().populate("member", "name mobileNumber memberId");

    const overdueList = [];

    // ‚úÖ Date-only compare (BD)
    const isSameBDDate = (date1, date2) => {
      const d1 = new Date(date1.toLocaleDateString("en-CA") + "T00:00:00");
      const d2 = new Date(date2.toLocaleDateString("en-CA") + "T00:00:00");
      return d1.getTime() === d2.getTime();
    };

    loans.forEach((loan) => {
      const interval = getIntervalDays(loan.installmentType);
      if (!interval) return;

      const startDate = new Date(loan.loanDate);
      const bdStartDate = new Date(startDate.toLocaleDateString("en-CA") + "T00:00:00");

      for (let i = 0; i < loan.installments; i++) {
        const instDate = new Date(bdStartDate);
        instDate.setDate(bdStartDate.getDate() + interval * i);

        // ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§
        if (instDate > bdToday) break;

        const isPaid = loan.collections.some(col =>
          isSameBDDate(new Date(col.collectionDate), instDate)
        );

        if (!isPaid) {
          overdueList.push({
            memberName: loan.member?.name,
            mobileNumber: loan.member?.mobileNumber,
            memberId: loan.memberId,
            loanId: loan._id,
            installmentNo: i + 1,
            installmentAmount: Number(loan.installmentAmount).toFixed(2),
            dueDate: instDate.toLocaleDateString("en-CA"),
            type: loan.installmentType,
          });
        }
      }
    });

    res.json(overdueList);

  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});





// üîπ SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶∞‡¶æ‡¶â‡¶ü
app.post("/api/send-loan-sms", async (req, res) => {
  const { phone, message } = req.body;

  if (!phone || !message) {
    return res.status(400).json({ success: false, error: "Phone & message required" });
  }

  const result = await sendSms(phone, message);
  if (result.success) {
    res.json({ success: true, message: "SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‚úÖ", response: result.response });
  } else {
    res.status(500).json({ success: false, error: "SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!" });
  }
});

// 1Ô∏è‚É£ ‡¶∏‡¶¨ member + loan load ‡¶ï‡¶∞‡¶æ, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞ loan ‡¶Ü‡¶õ‡ßá for ‡¶≤‡ßã‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶® page
app.get("/api/close-loans", async (req, res) => {
  try {
    const members = await Member.find().lean();
    const loans = await Loan.find().lean();

    const data = members
      .map(member => {
        const memberLoans = loans.filter(loan => loan.memberId === member.memberId);

        if (memberLoans.length === 0) return null; // ‡¶Ø‡¶¶‡¶ø loan ‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, skip

        let totalLoan = 0;
        let totalPaid = 0;

        memberLoans.forEach(loan => {
          totalLoan += loan.totalLoan;
          const paidAmount = loan.collections?.reduce((sum, c) => sum + c.amount, 0) || 0;
          totalPaid += paidAmount;
        });

        return {
          ...member,
          loans: memberLoans,
          totalLoan,
          totalPaid,
          dueAmount: totalLoan - totalPaid
        };
      })
      .filter(Boolean); // null remove ‡¶ï‡¶∞‡¶æ

    res.json(data);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});


// 2Ô∏è‚É£ Member ‡¶è‡¶∞ loans fetch (‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§)for ‡¶≤‡ßã‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶® page
app.get("/api/member-loans/:memberId", async (req, res) => {
  try {
    const { memberId } = req.params;
    const loans = await Loan.find({ memberId }).lean();
    res.json(loans);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});

// 3Ô∏è‚É£ ‡¶≤‡ßã‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ (delete)for ‡¶≤‡ßã‡¶® ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶® page
app.delete("/api/close-loan/:memberId", async (req, res) => {
  try {
    const { memberId } = req.params;
    await Loan.deleteMany({ memberId });
    res.json({ message: "Member loans closed successfully" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});

//DPS scheme
const dpsSchemeSchema = new mongoose.Schema(
  {
    schemeName: { type: String, required: true },
    durationMonths: { type: Number, required: true },
    monthlyAmount: { type: Number, required: true },
    dpsType: { type: String, enum: ["‡¶≤‡¶æ‡¶≠", "‡¶≤‡¶æ‡¶≠ ‡¶¨‡¶ø‡¶π‡ßÄ‡¶®"], required: true },
    interestRate: { type: Number, default: 0 },
    targetAmount: { type: Number, required: true },
    status: { type: String, enum: ["active", "inactive"], default: "active" },
  },
  { timestamps: true }
);

const DpsScheme = mongoose.model("DpsScheme", dpsSchemeSchema);

// === Create DPS Scheme ===
app.post("/api/dps-schemes", async (req, res) => {
  try {
    let {
      schemeName,
      durationMonths,
      monthlyAmount,
      dpsType,
      interestRate,
      targetAmount,
      status,
    } = req.body;

    // ‡¶Ø‡¶¶‡¶ø ‡¶≤‡¶æ‡¶≠ ‡¶¨‡¶ø‡¶π‡ßÄ‡¶® ‡¶π‡ßü, interestRate ‡¶ú‡¶ø‡¶∞‡ßã ‡¶ï‡¶∞‡ßá ‡¶¶‡¶æ‡¶ì
    if (dpsType === "‡¶≤‡¶æ‡¶≠ ‡¶¨‡¶ø‡¶π‡ßÄ‡¶®") {
      interestRate = 0;
    }

    // ‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶≤‡¶ï‡ßÅ‡¶≤‡ßá‡¶ü
    let baseAmount = durationMonths * monthlyAmount;
    let totalAmount =
      dpsType === "‡¶≤‡¶æ‡¶≠" && interestRate > 0
        ? baseAmount + (baseAmount * interestRate) / 100
        : baseAmount;

    // ‡¶®‡¶æ‡¶Æ ‡¶Ø‡¶¶‡¶ø frontend ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶æ ‡¶Ü‡¶∏‡ßá, server ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶¨‡¶æ‡¶®‡¶æ‡¶¨‡ßá
    if (!schemeName) {
      const durationText =
        durationMonths >= 12
          ? `${durationMonths / 12} ‡¶¨‡¶õ‡¶∞`
          : `${durationMonths} ‡¶Æ‡¶æ‡¶∏`;
      schemeName = `${durationText} ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ - ‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï ${monthlyAmount} ‡¶ü‡¶æ‡¶ï‡¶æ - ${dpsType} - ${interestRate}% ‡¶≤‡¶æ‡¶≠`;
    }

    const newScheme = new DpsScheme({
      schemeName,
      durationMonths,
      monthlyAmount,
      dpsType,
      interestRate,
      targetAmount: Math.round(totalAmount),
      status,
    });

    const savedScheme = await newScheme.save();
    res.status(201).json(savedScheme);
  } catch (err) {
    console.error("Error creating DPS scheme:", err);
    res.status(500).json({ message: "Server Error" });
  }
});

// Get all DPS Schemes
app.get("/api/dps-schemes", async (req, res) => {
  try {
    const schemes = await DpsScheme.find().sort({ createdAt: -1 }); // ‡¶®‡¶§‡ßÅ‡¶®‡¶ó‡ßÅ‡¶≤‡ßã ‡¶Ü‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶¨‡ßá
    res.json(schemes);
  } catch (err) {
    console.error("Error fetching DPS schemes:", err);
    res.status(500).json({ message: "Server Error" });
  }
});

//DPS setting scheme
const dpsSettingSchema = new mongoose.Schema({
  date: { type: Date, required: true },
  startDate: { type: Date, required: true },
  memberId: { type: String, required: true }, // ‡¶Ö‡¶•‡¶¨‡¶æ ObjectId, ‡¶Ø‡¶¶‡¶ø members collection ref ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶ì
  schemeId: { type: mongoose.Schema.Types.ObjectId, ref: "DpsScheme", required: true },
  durationMonths: Number,
  monthlyAmount: Number,
  interestRate: Number,
  targetAmount: Number,
  description: String,
  status: { type: String, enum: ["active", "inactive"], default: "active" },
  
  // ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ö‡¶Ç‡¶∂: collections array
  collections: [
    {
      date: { type: Date, required: true },
      collectedAmount: { type: Number, required: true },
      description: String,
      smsSent: { type: Boolean, default: false },
      balance: Number,
    }
  ]
}, { timestamps: true });



const DpsSetting = mongoose.model("DpsSetting", dpsSettingSchema);

// Create DPS setting for DPS ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶ï‡¶∞‡ßÅ‡¶® page
app.post("/api/dps-settings", async (req, res) => {
  try {
    const { date, startDate, memberId, schemeId, description, status } = req.body;

    // Get scheme details to autofill
    const scheme = await DpsScheme.findById(schemeId);
    if (!scheme) return res.status(404).json({ message: "Scheme not found" });

    const newSetting = new DpsSetting({
      date,
      startDate,
      memberId,
      schemeId,
      durationMonths: scheme.durationMonths,
      monthlyAmount: scheme.monthlyAmount,
      interestRate: scheme.interestRate,
      targetAmount: scheme.targetAmount,
      description,
      status,
    });

    const savedSetting = await newSetting.save();
    res.status(201).json(savedSetting);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});


// GET DPS settings by memberId for DPS collection page
app.get("/api/member-dps-settings/:memberId", async (req, res) => {
  try {
    // Member ‡¶è‡¶∞ ‡¶∏‡¶¨ active DPS settings ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶∏‡¶æ
    const settings = await DpsSetting.find({ 
      memberId: req.params.memberId,
      status: "active"
    }).populate("schemeId"); // scheme ‡¶è‡¶∞ ‡¶™‡ßÅ‡¶∞‡ßã object include

    res.json(settings);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});

// POST DPS collection and push to collections array
app.post("/api/dps-allcollections", async (req, res) => {
  try {
    const { date, memberId, schemeId, collectedAmount, description, smsSent, balance } = req.body;

    // ‚úÖ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    const member = await Member.findOne({ memberId });
    if (!member) return res.status(404).json({ message: "Member not found" });

    // ‚úÖ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü member & scheme ‡¶è‡¶∞ DPS setting ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
    const setting = await DpsSetting.findOne({ memberId, schemeId });
    if (!setting) return res.status(404).json({ message: "DPS setting not found" });

    // ‚úÖ ‡¶®‡¶§‡ßÅ‡¶® collection push ‡¶ï‡¶∞‡¶æ
    setting.collections.push({
      date: new Date(date),
      collectedAmount,
      description,
      smsSent: smsSent || false,
      balance: balance || 0,
    });

    // ‚úÖ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ setting save ‡¶ï‡¶∞‡¶æ
    const savedSetting = await setting.save();

    // ‚úÖ SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã
    if (smsSent && member.mobileNumber) {
      const message = `‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ${member.name}, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ DPS ‡¶∏‡ßç‡¶ï‡ßÄ‡¶Æ "${setting.schemeId.schemeName}" ‡¶è ${collectedAmount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ú‡¶Æ‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§`;

      try {
        const smsResult = await sendSms(member.mobileNumber, message);
        console.log("‚úÖ SMS Response:", smsResult);
      } catch (smsErr) {
        console.error("‚ùå SMS Error:", smsErr);
      }
    }

    res.status(201).json(savedSetting);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server Error" });
  }
});



// GET schemes with matching dpssettings and member info for ‡¶∏‡¶ï‡¶≤ DPS ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® page
app.get("/api/dps-schemes-with-members", async (req, res) => {
  try {
    // 1) ‡¶∏‡¶ï‡¶≤ active/available schemes ‡¶®‡¶æ‡¶ì (‡¶ö‡¶æ‡¶á‡¶≤‡ßá filter ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã)
    const schemes = await DpsScheme.find({ status: { $ne: "inactive" } }).lean();

    // 2) ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø scheme-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø matching dpssettings ‡¶®‡¶ø‡ßü‡ßá ‡¶Ü‡¶∏‡¶¨‡ßá
    const result = [];
    for (const scheme of schemes) {
      // scheme._id is ObjectId
      const settings = await DpsSetting.find({ schemeId: scheme._id, status: "active" }).lean();

      // 3) ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø setting-‡¶è‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá member info attach ‡¶ï‡¶∞‡ßã
      // (‡¶§‡ßÅ‡¶Æ‡¶ø memberId string ‡¶∞‡ßá‡¶ñ‡ßá ‡¶•‡¶æ‡¶ï‡¶≤‡ßá members.collection ‡¶è memberId ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶®‡¶æ‡¶ì)
      const enrichedSettings = await Promise.all(
        settings.map(async (s) => {
          // try to find member by memberId field first (string)
          let member = null;
          if (s.memberId) {
            // members collection seems to store memberId as string (like "21123333")
            member = await Member.findOne({ memberId: s.memberId }).select("name memberId mobileNumber _id").lean();
            // If nothing found and memberId looks like ObjectId, try match by _id
            if (!member) {
              const mongoose = require("mongoose");
              if (mongoose.Types.ObjectId.isValid(s.memberId)) {
                member = await Member.findById(s.memberId).select("name memberId mobileNumber _id").lean();
              }
            }
          }

          return {
            ...s,
            member: member || null, // null ‡¶π‡¶≤‡ßá front-end ‡¶è handle ‡¶ï‡¶∞‡¶¨‡ßá
          };
        })
      );

      result.push({
        scheme,
        settings: enrichedSettings,
      });
    }

    res.json(result);
  } catch (err) {
    console.error("Error in /api/dps-schemes-with-members:", err);
    res.status(500).json({ message: "Server Error" });
  }
});

// =====================
// üìò DPS ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ API
// =====================
app.get("/api/dps-management", async (req, res) => {
  try {
    // const DpsScheme = require("./models/DpsScheme");
    // const DpsSetting = require("./models/DpsSetting");

    // ‡¶∏‡¶¨ ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã
    const schemes = await DpsScheme.find().lean();

    // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶æ ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ ‡¶§‡¶•‡ßç‡¶Ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßã
    const result = await Promise.all(
      schemes.map(async (scheme) => {
        // ‡¶è‡¶á ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ‡ßá‡¶∞ ‡¶Ö‡¶ß‡ßÄ‡¶®‡ßá ‡¶ï‡¶§‡¶ú‡¶® ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø ‡¶Ü‡¶õ‡ßá ‡¶∏‡ßá‡¶ü‡¶æ ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßã
        const settings = await DpsSetting.find({ schemeId: scheme._id }).lean();
        const totalMembers = settings.length;

        return {
          _id: scheme._id,
          schemeName: scheme.schemeName,
          startDate: scheme.createdAt,
          durationMonths: scheme.durationMonths,
          monthlyAmount: scheme.monthlyAmount,
          targetAmount: scheme.targetAmount,
          interestRate: scheme.interestRate,
          totalMembers,
          status: scheme.status || "active",
        };
      })
    );

    res.json(result);
  } catch (err) {
    console.error("Error fetching DPS management:", err);
    res.status(500).json({ message: "Server Error" });
  }
});

// =====================
// üìï ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü DPS ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶§‡ßá (DPS ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®) for DPS ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ
// =====================
app.delete("/api/dps-management/:schemeId", async (req, res) => {
  try {
    // const DpsScheme = require("./models/DpsScheme");
    const { schemeId } = req.params;

    const deleted = await DpsScheme.findByIdAndDelete(schemeId);

    if (!deleted) {
      return res.status(404).json({ message: "DPS Scheme not found" });
    }

    res.json({ message: "DPS ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!" });
  } catch (err) {
    console.error("Error deleting DPS scheme:", err);
    res.status(500).json({ message: "Server Error" });
  }
});

//‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø ‡¶ú‡¶Æ‡¶æ ‡¶¶‡ßá‡¶ì‡ßü‡¶æ‡¶∞ date page
app.get("/api/todays-dps", async (req, res) => {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const settings = await DpsSetting.find({ status: "active" })
      .populate("schemeId")
      .lean();

    const result = [];

    for (const s of settings) {
      if (!s.startDate) continue;

      const start = new Date(s.startDate);
      start.setHours(0, 0, 0, 0);

      const monthsPassed =
        (today.getFullYear() - start.getFullYear()) * 12 +
        (today.getMonth() - start.getMonth());

      const nextInstallmentDate = new Date(start);
      nextInstallmentDate.setMonth(start.getMonth() + monthsPassed);

      // safer date comparison
      if (
        nextInstallmentDate.getFullYear() === today.getFullYear() &&
        nextInstallmentDate.getMonth() === today.getMonth() &&
        nextInstallmentDate.getDate() === today.getDate()
      ) {
        const member = await Member.findOne({ memberId: s.memberId }).lean();
        if (!member) continue;

        result.push({
          memberName: member.name,
          memberPhone: member.phone,
          schemeName: s.schemeId.schemeName,
          monthlyAmount: s.monthlyAmount,
          startDate: s.startDate,
        });
      }
    }

    res.json(result);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});


//‡¶¶‡ßà‡¶®‡¶ø‡¶ï DPS ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü
app.get("/api/daily-dps-report", async (req, res) => {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // ‡¶∂‡ßÅ‡¶ß‡ßÅ date check

    const settings = await DpsSetting.find({ status: "active" })
      .populate("schemeId") // DPS scheme info
      .lean();

    const result = [];

    for (const s of settings) {
      if (!s.collections || s.collections.length === 0) continue;

      // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø filter
      const todaysCollections = s.collections.filter((c) => {
        const colDate = new Date(c.date || c.createdAt);
        colDate.setHours(0, 0, 0, 0);
        return colDate.getTime() === today.getTime();
      });

      if (todaysCollections.length === 0) continue;

      // member info
      // Member collection ‡¶è id string
const member = await Member.findOne({ memberId: s.memberId }).lean();

      if (!member) continue;

      // ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø collection object map
      todaysCollections.forEach((c) => {
        result.push({
          memberName: member.name,
          memberPhone: member.mobileNumber,
          schemeName: s.schemeId.schemeName,
          collectedAmount: c.collectedAmount,
          collectionDate: c.date || c.createdAt,
        });
      });
    }

    res.json(result);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});


// ‚úÖ ‡¶∏‡¶ï‡¶≤ DPS ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡ßá‡¶∞ ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü page
app.get("/api/dps-report", async (req, res) => {
  try {
    const dpsList = await DpsSetting.find();

    const reportData = [];

    for (const dps of dpsList) {
      const member = await Member.findOne({ memberId: dps.memberId });
      const scheme = await DpsScheme.findById(dps.schemeId);

      if (!member) continue;

      const totalInstallments = dps.collections?.length || 0;
      const totalAmount = dps.collections?.reduce(
        (sum, c) => sum + (c.collectedAmount || c.amount || 0),
        0
      );

      reportData.push({
        memberId: dps.memberId,
        memberName: member.name,
        phone: member.mobileNumber,
        schemeName: scheme ? scheme.schemeName : "N/A",
        monthlyAmount: dps.monthlyAmount,
        totalInstallments,
        totalAmount,
        collections: dps.collections || [], // ‚úÖ ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶æ ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£
      });
    }

    res.json(reportData);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error occurred" });
  }
});


// FDR section
const fdrSchemeSchema = new mongoose.Schema({
  schemeName: { type: String, required: true },
  schemeType: { type: String, enum: ["Fixed ‡¶≤‡¶æ‡¶≠", "‡¶Æ‡¶æ‡¶∏‡¶ø‡¶ï Fixed ‡¶≤‡¶æ‡¶≠"], required: true },
  duration: { type: Number, required: true }, // months
  interestValue: { type: Number, default: 0 },
  interestType: { type: String, enum: ["%", "‡ß≥"], default: "%" },
  startDate: { type: Date, default: Date.now },
  status: { type: String, enum: ["active", "inactive"], default: "active" },
}, { timestamps: true });

const FdrScheme = mongoose.model("FdrScheme", fdrSchemeSchema);

//FDR ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶® page 
app.post("/api/fdr-schemes", async (req, res) => {
  try {
    const { schemeName, schemeType, duration, interestValue, interestType, startDate, status } = req.body;

    const newScheme = new FdrScheme({
      schemeName,
      schemeType,
      duration,
      interestValue,
      interestType,
      startDate: startDate ? new Date(startDate) : new Date(),
      status,
    });

    await newScheme.save();
    res.status(201).json({ message: "FDR ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", scheme: newScheme });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "FDR ‡¶∏‡ßç‡¶ï‡¶ø‡¶Æ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá" });
  }
});


const fdrSettingSchema = new mongoose.Schema({
  memberId: String,
  schemeId: mongoose.Schema.Types.ObjectId,
  collectionDate: Date,
  effectiveDate: Date,
  duration: Number,
  interestValue: Number,
  interestType: String,
  fdrAmount: Number,
  description: String,
  status: String,
  sendSMS: Boolean,
  createdAt: { type: Date, default: Date.now },
});

const FdrSetting = mongoose.model("FdrSetting", fdrSettingSchema);
//FDR ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® page er jonno get
app.get("/api/fdr-options", async (req, res) => {
  try {
    const members = await Member.find({ role: "member" });
    const schemes = await FdrScheme.find();
    res.json({ members, schemes });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});
//FDR ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® page
app.post("/api/fdr-settings", async (req, res) => {
  try {
    const {
      memberId,
      schemeId,
      collectionDate,
      effectiveDate,
      fdrAmount,
      description,
      status,
      sendSMS,
    } = req.body;

    const scheme = await FdrScheme.findById(schemeId);
    if (!scheme) return res.status(400).json({ message: "Invalid scheme selected" });

     const member = await Member.findOne({ memberId });
    if (!member) return res.status(404).json({ message: "Member not found" });


    const newFdr = new FdrSetting({
      memberId,
      schemeId,
      collectionDate,
      effectiveDate,
      duration: scheme.duration,
      interestValue: scheme.interestValue,
      interestType: scheme.interestType,
      fdrAmount,
      description,
      status,
      sendSMS,
    });

    await newFdr.save();


     // ‚úÖ SMS ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶¨‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã
    if (sendSMS && member.mobileNumber) {
      const message = `‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ${member.name}, ‡¶Ü‡¶™‡¶®‡¶ø ${fdrAmount} ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø‡ßá‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø FDR ‡¶ñ‡ßÅ‡¶≤‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶•‡¶æ‡¶ï‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§`;
      
      try {
        const smsResult = await sendSms(member.mobileNumber, message);
        console.log("‚úÖ SMS Response:", smsResult);
      } catch (smsErr) {
        console.error("‚ùå SMS Error:", smsErr);
      }
    }
  

    res.json({ message: "FDR ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});

//‡¶∏‡¶ï‡¶≤ FDR ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® page
app.get("/api/fdr-collections", async (req, res) => {
  try {
    const fdrSettings = await FdrSetting.find();

    const reportData = [];

    for (const fdr of fdrSettings) {
      const scheme = await FdrScheme.findById(fdr.schemeId);
      const member = await Member.findOne({ memberId: fdr.memberId });

      if (!scheme || !member) continue;

      reportData.push({
        fdrId: fdr._id,
        memberName: member.name,
        memberPhone: member.mobileNumber,
        schemeName: scheme.schemeName,
        schemeType: scheme.schemeType,
        duration: fdr.duration,
        interestValue: fdr.interestValue,
        interestType: fdr.interestType,
        fdrAmount: fdr.fdrAmount,
        collectionDate: fdr.collectionDate,
        effectiveDate: fdr.effectiveDate,
        status: fdr.status,
        description: fdr.description,
        sendSMS: fdr.sendSMS,
      });
    }

    // üîπ ‡¶≤‡¶æ‡¶∏‡ßç‡¶ü ‡¶è‡¶®‡ßç‡¶ü‡ßç‡¶∞‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    res.json(reportData.reverse());
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error occurred" });
  }
});



// ‡¶∏‡¶ï‡¶≤ FDR settings + member + scheme data fetch for FDR ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ page
app.get("/api/fdr-management", async (req, res) => {
  try {
    const fdrSettings = await FdrSetting.find();

    const reportData = [];

    for (const fdr of fdrSettings) {
      const member = await Member.findOne({ memberId: fdr.memberId });
      const scheme = await FdrScheme.findById(fdr.schemeId);

      if (!member || !scheme) continue;

      reportData.push({
        fdrId: fdr._id,
        memberId: member.memberId,
        memberName: member.name,
        phone: member.mobileNumber,
        schemeId: scheme._id,
        schemeName: scheme.schemeName,
        schemeType: scheme.schemeType,
        fdrAmount: fdr.fdrAmount,
        interestValue: scheme.interestValue,
        interestType: scheme.interestType,
        duration: scheme.duration,
        effectiveDate: fdr.effectiveDate,
        collectionDate: fdr.collectionDate,
        status: fdr.status,
        smsSent: fdr.smsSent || false,
        description: fdr.description || "",
      });
    }

    res.json(reportData);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error occurred" });
  }
});

// Delete FDR for FDR ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ page
app.delete("/api/fdr-management/:id", async (req, res) => {
  try {
    const { id } = req.params;
    await FdrSetting.findByIdAndDelete(id);
    res.json({ message: "FDR ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!" });
  }
});

// Update/Edit FDR for FDR ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ page
app.put("/api/fdr-management/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const updatedData = req.body;
    await FdrSetting.findByIdAndUpdate(id, updatedData);
    res.json({ message: "FDR ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!" });
  }
});

// Withdraw amount (partial withdrawal) for FDR ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ page
app.post("/api/fdr-management/withdraw/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { amount } = req.body;

    const fdr = await FdrSetting.findById(id);
    if (!fdr) return res.status(404).json({ message: "FDR ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§" });

    const withdrawAmount = parseFloat(amount);
    if (withdrawAmount <= 0) return res.status(400).json({ message: "‡¶∏‡¶†‡¶ø‡¶ï ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶¶‡¶ø‡¶®‡•§" });

    // Withdraw
    fdr.fdrAmount -= withdrawAmount;

    if (fdr.fdrAmount < 0) fdr.fdrAmount = 0; // ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£ Withdraw ‡¶π‡¶≤‡ßá 0 ‡¶π‡¶¨‡ßá

    await fdr.save();

    res.json({ message: "‡¶ü‡¶æ‡¶ï‡¶æ ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶® ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", remainingAmount: fdr.fdrAmount });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!" });
  }
});


// GET /api/fdr-daily-report?date=YYYY-MM-DD for FDR ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü page
// ‡¶¶‡ßà‡¶®‡¶ø‡¶ï FDR ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü
app.get("/api/fdr-daily-report", async (req, res) => {
  try {
    // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ø‡¶¶‡¶ø ?date=2025-10-06 ‡¶®‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡ßü, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶®‡ßá‡¶¨‡ßá
    const today = new Date().toISOString().slice(0, 10);
    const queryDate = req.query.date || today;

    // ‡¶ì‡¶á ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá‡¶∞ ‡¶∏‡¶¨ FDR ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
    const fdrList = await FdrSetting.find({ collectionDate: queryDate });

    if (fdrList.length === 0) {
      return res.status(200).json({
        message: "‡¶è‡¶á ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá ‡¶ï‡ßã‡¶®‡ßã FDR ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§",
        data: [],
      });
    }

    const report = [];

    for (const fdr of fdrList) {
      const member = await Member.findOne({ memberId: fdr.memberId });
      const scheme = await FdrScheme.findById(fdr.schemeId);

      if (!member || !scheme) continue;

      report.push({
        memberName: member.name,
        phone: member.mobileNumber,
        schemeName: scheme.schemeName,
        schemeType: scheme.schemeType,
        fdrAmount: fdr.fdrAmount,
        interestValue: scheme.interestValue,
        interestType: scheme.interestType,
        duration: scheme.duration,
        effectiveDate: fdr.effectiveDate,
        collectionDate: fdr.collectionDate,
        status: fdr.status,
      });
    }

    res.status(200).json({
      message: `${queryDate} ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ‡ßá‡¶∞ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü`,
      data: report,
    });
  } catch (err) {
    console.error("FDR Report Error:", err);
    res.status(500).json({ message: "‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!" });
  }
});


//FDR ‡¶ú‡¶Æ‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü
app.get("/api/fdr-transaction-report", async (req, res) => {
  try {
    const { type, date } = req.query;
    const filter = {};

    // Filter by type
    if (type === "deposit") filter.status = "active";
    else if (type === "withdraw") filter.status = "withdrawn";

    // Filter by date (optional)
    if (date) filter.collectionDate = date;

    const fdrList = await FdrSetting.find(filter);

    const report = [];

    for (const fdr of fdrList) {
      const member = await Member.findOne({ memberId: fdr.memberId });
      const scheme = await FdrScheme.findById(fdr.schemeId);
      if (!member || !scheme) continue;

      report.push({
        type: fdr.status === "active" ? "‡¶ú‡¶Æ‡¶æ" : "‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶®",
        memberName: member.name,
        phone: member.mobileNumber,
        schemeName: scheme.schemeName,
        duration: scheme.duration,
        interestValue: scheme.interestValue,
        fdrAmount: fdr.fdrAmount,
        collectionDate: fdr.collectionDate,
        effectiveDate: fdr.effectiveDate,
        status: fdr.status,
      });
    }

    res.json({ success: true, data: report });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!" });
  }
});


//‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Ø‡¶º-‡¶¨‡ßç‡¶Ø‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶§ schem
const otherIncomeExpenseSchema = new mongoose.Schema({
  name: { type: String, required: true, unique: true }, // ‡¶ñ‡¶æ‡¶§‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ
  totalDeposit: { type: Number, default: 0 }, // ‡¶Æ‡ßã‡¶ü ‡¶ú‡¶Æ‡¶æ
  totalExpense: { type: Number, default: 0 }, // ‡¶Æ‡ßã‡¶ü ‡¶ñ‡¶∞‡¶ö
  transactions: [
    {
      type: { type: String, enum: ["deposit", "expense"], required: true },
      amount: { type: Number, required: true },
      date: { type: Date, default: Date.now },
      note: { type: String },
    },
  ],
}, { timestamps: true });

const OtherIncomeExpense = mongoose.model("OtherIncomeExpense", otherIncomeExpenseSchema);


// ‡¶®‡¶§‡ßÅ‡¶® ‡¶ñ‡¶æ‡¶§ ‡¶§‡ßà‡¶∞‡¶ø for ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Ø‡¶º-‡¶¨‡ßç‡¶Ø‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶§ page
app.post("/api/other-income-expense", async (req, res) => {
  try {
    const { name } = req.body;
    if (!name) return res.status(400).json({ message: "‡¶ñ‡¶æ‡¶§‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®" });

    const existing = await OtherIncomeExpense.findOne({ name });
    if (existing) return res.status(400).json({ message: "‡¶è‡¶á ‡¶ñ‡¶æ‡¶§ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶Ü‡¶õ‡ßá" });

    const newCategory = await OtherIncomeExpense.create({ name });
    res.json({ success: true, data: newCategory });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});

// ‡¶∏‡¶¨ ‡¶ñ‡¶æ‡¶§‡ßá‡¶∞ ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü for ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Ø‡¶º-‡¶¨‡ßç‡¶Ø‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶§ page
app.get("/api/other-income-expense", async (req, res) => {
  try {
    const list = await OtherIncomeExpense.find().lean();
    res.json({ success: true, data: list });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});

// ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶ú‡¶Æ‡¶æ ‡¶¨‡¶æ ‡¶ñ‡¶∞‡¶ö ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ for ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ü‡¶Ø‡¶º-‡¶¨‡ßç‡¶Ø‡¶Ø‡¶º‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶§ page
app.post("/api/other-income-expense/:id/transaction", async (req, res) => {
  try {
    const { id } = req.params;
    const { type, amount, note } = req.body;

    if (!["deposit", "expense"].includes(type)) return res.status(400).json({ message: "Invalid type" });

    const category = await OtherIncomeExpense.findById(id);
    if (!category) return res.status(404).json({ message: "‡¶ñ‡¶æ‡¶§ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø" });

    // Transaction add
    category.transactions.push({ type, amount, note });

    // Update totals
    if (type === "deposit") category.totalDeposit += amount;
    else if (type === "expense") category.totalExpense += amount;

    await category.save();
    res.json({ success: true, data: category });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Server error" });
  }
});


//‡¶ñ‡¶∞‡¶ö‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ page
const expenseCategorySchema = new mongoose.Schema({
  categoryName: { type: String, required: true },
  totalExpense: { type: Number, default: 0 },
  transactions: [
    {
      amount: Number,
      date: { type: Date, default: Date.now },
      note: String,
    },
  ],
});

const ExpenseCategory = mongoose.model("ExpenseCategory", expenseCategorySchema);

//‡¶ñ‡¶∞‡¶ö‡ßá‡¶∞ ‡¶ñ‡¶æ‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ page
app.post("/api/expense-category", async (req, res) => {
  try {
    const { categoryName } = req.body;
    const newCategory = new ExpenseCategory({ categoryName });
    await newCategory.save();
    res.status(201).json(newCategory);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// ‚úÖ ‡¶∏‡¶¨ ‡¶ñ‡¶æ‡¶§ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ
app.get("/api/expense-category", async (req, res) => {
  const data = await ExpenseCategory.find();
  res.json(data);
});

// ‚úÖ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® (‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶®)
app.post("/api/expense-category/:id/add-expense", async (req, res) => {
  try {
    const { amount, note } = req.body;
    const category = await ExpenseCategory.findById(req.params.id);

    const transaction = { amount, note, date: new Date() };
    category.transactions.push(transaction);
    category.totalExpense += Number(amount);

    await category.save();
    res.json(category);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¶‡ßá‡¶ñ‡¶æ
// app.get("/:id", async (req, res) => {
//   const category = await ExpenseCategory.findById(req.params.id);
//   res.json(category);
// });


//‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ü‡¶æ‡¶ï‡¶æ segment
const initialCashSchema = new mongoose.Schema({
  date: { type: Date, default: Date.now },
  amount: { type: Number, required: true },
  description: { type: String, default: "" },
});

const InitialCash = mongoose.model("InitialCash", initialCashSchema);

// ‚úÖ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶¨‡¶æ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ
app.post("/api/initial-cash", async (req, res) => {
  try {
    const { amount, description } = req.body;
    let cash = await InitialCash.findOne();

    if (cash) {
      // Update existing
      cash.amount = amount;
      cash.description = description;
      cash.date = new Date();
      await cash.save();
      return res.json(cash);
    } else {
      // Create new
      const newCash = new InitialCash({ amount, description });
      await newCash.save();
      res.status(201).json(newCash);
    }
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ ‡¶π‡¶ø‡¶∏‡¶æ‡¶¨ ‡¶∂‡ßÅ‡¶∞‡ßÅ‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ü‡¶æ‡¶ï‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ
app.get("/api/initial-cash", async (req, res) => {
  try {
    const cash = await InitialCash.findOne();
    res.json(cash);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});


// ‚úÖ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü API for ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü page
app.get("/api/daily-collection", async (req, res) => {
  try {
    const today = new Date();
    const startOfDay = new Date(today.setHours(0, 0, 0, 0));
    const endOfDay = new Date(today.setHours(23, 59, 59, 999));

    // DPS collection ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
    const dpsData = await DpsSetting.aggregate([
      { $unwind: "$collections" },
      {
        $match: {
          "collections.date": { $gte: startOfDay, $lte: endOfDay },
        },
      },
      {
        $project: {
          _id: 1,
          memberId: 1,
          schemeId: 1,
          collectedAmount: "$collections.collectedAmount",
          description: "$collections.description",
          date: "$collections.date",
          type: { $literal: "DPS" },
        },
      },
    ]);

    // FDR collection ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
    const fdrData = await FdrSetting.find({
      collectionDate: { $gte: startOfDay, $lte: endOfDay },
    }).select("memberId fdrAmount description collectionDate").lean();

    const fdrFormatted = fdrData.map((fdr) => ({
      _id: fdr._id,
      memberId: fdr.memberId,
      schemeId: fdr.schemeId,
      collectedAmount: fdr.fdrAmount,
      description: fdr.description,
      date: fdr.collectionDate,
      type: "FDR",
    }));

    // Loan collection ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ
    const loanData = await Loan.aggregate([
      { $unwind: "$collections" },
      {
        $match: {
          "collections.collectionDate": { $gte: startOfDay, $lte: endOfDay },
        },
      },
      {
        $project: {
          _id: 1,
          memberId: 1,
          name: 1,
          collectedAmount: "$collections.amount",
          description: "$collections.description",
          date: "$collections.collectionDate",
          type: { $literal: "Loan" },
        },
      },
    ]);

    // ‡¶§‡¶ø‡¶®‡¶ü‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá merge ‡¶ï‡¶∞‡¶æ
    const allCollections = [...dpsData, ...fdrFormatted, ...loanData];

    // ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ sort ‡¶ï‡¶∞‡¶æ
    allCollections.sort((a, b) => new Date(b.date) - new Date(a.date));

    res.json(allCollections);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Server Error" });
  }
});


//‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶≤‡ßá‡¶®‡¶¶‡ßá‡¶® ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü page
app.get("/api/daily-transaction-report", async (req, res) => {
  try {
    const todayStart = new Date();
    todayStart.setHours(0, 0, 0, 0);
    const todayEnd = new Date();
    todayEnd.setHours(23, 59, 59, 999);

    // ‡¶Æ‡ßã‡¶ü ‡¶≤‡ßã‡¶® ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® (collections array ‡¶•‡ßá‡¶ï‡ßá)
const totalLoanCollection = await Loan.aggregate([
  { $unwind: "$collections" }, // collections array ‡¶´‡¶æ‡¶ü‡¶ø‡ßü‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ document ‡¶¨‡¶æ‡¶®‡¶æ‡¶¨‡ßá
  {
    $match: {
      "collections.collectionDate": { $gte: todayStart, $lte: todayEnd },
    },
  },
  { $group: { _id: null, total: { $sum: "$collections.amount" } } },
]);

// ‡¶Æ‡ßã‡¶ü ‡¶≤‡ßã‡¶® ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® (initialLoanAmount ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶Ø‡ßá‡¶ü‡¶æ ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡ßü)
const totalLoanDisbursed = await Loan.aggregate([
  {
    $match: {
      loanDate: { $gte: todayStart, $lte: todayEnd },
    },
  },
  { $group: { _id: null, total: { $sum: "$initialLoanAmount" } } },
]);



    // ‡¶Æ‡ßã‡¶ü ‡¶è‡¶´.‡¶°‡¶ø.‡¶Ü‡¶∞ ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶®
    const totalFDRCollection = await FdrScheme.aggregate([
      {
        $match: {
          type: "deposit", // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ü‡¶æ‡¶§‡ßá ‡¶Ø‡¶¶‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶®‡¶æ‡¶Æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶Ø‡ßá‡¶Æ‡¶® "open" ‡¶∏‡ßá‡¶ü‡¶æ‡¶ì ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã
          date: { $gte: todayStart, $lte: todayEnd },
        },
      },
      { $group: { _id: null, total: { $sum: "$amount" } } },
    ]);

    // ‡¶Æ‡ßã‡¶ü ‡¶è‡¶´.‡¶°‡¶ø.‡¶Ü‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶®
    const totalFDRWithdraw = await FdrScheme.aggregate([
      {
        $match: {
          type: "withdraw", // ‡¶Ø‡¶¶‡¶ø withdrawal ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶•‡¶æ‡¶ï‡ßá
          date: { $gte: todayStart, $lte: todayEnd },
        },
      },
      { $group: { _id: null, total: { $sum: "$amount" } } },
    ]);

    // ‡¶Æ‡ßã‡¶ü ‡¶è‡¶´.‡¶°‡¶ø.‡¶Ü‡¶∞ ‡¶≤‡¶æ‡¶≠ ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶®
    const totalFDRProfitWithdraw = await FdrSetting.aggregate([
      {
        $match: {
          type: "profitWithdraw",
          date: { $gte: todayStart, $lte: todayEnd },
        },
      },
      { $group: { _id: null, total: { $sum: "$amount" } } },
    ]);

    // ‡¶Æ‡ßã‡¶ü ‡¶°‡¶ø.‡¶™‡¶ø.‡¶è‡¶∏ ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶®
   const totalDPSCollectionAgg = await DpsSetting.aggregate([
  { $unwind: "$collections" }, // collections array ‡¶ñ‡ßÅ‡¶≤‡ßá ‡¶¶‡¶ø‡¶¨‡ßá
  { $match: { "collections.date": { $gte: todayStart, $lte: todayEnd } } }, // ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ collection
  { $group: { _id: null, total: { $sum: "$collections.collectedAmount" } } }, // sum
]);
const totalDPSCollection = totalDPSCollectionAgg[0]?.total || 0;

// ‡¶Ø‡¶¶‡¶ø DPS-‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡ßã‡¶≤‡¶® ‡¶•‡¶æ‡¶ï‡¶§, ‡¶è‡¶¨‡¶Ç collections array ‡¶è type="withdraw" ‡¶•‡¶æ‡¶ï‡ßá
// ‡¶è‡¶ñ‡¶® ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ collection/withdraw ‡¶§‡¶¨‡ßá:
const totalDPSWithdrawAgg = await DpsSetting.aggregate([
  { $unwind: "$collections" },
  { $match: { "collections.type": "withdraw", "collections.date": { $gte: todayStart, $lte: todayEnd } } },
  { $group: { _id: null, total: { $sum: "$collections.amount" } } },
]);

    // ‡¶Æ‡ßã‡¶ü ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶π‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ç‡¶ï‡ßá ‡¶ú‡¶Æ‡¶æ
    const totalCashToBank = await InitialCash.aggregate([
      {
        $match: {
          type: "bankDeposit",
          date: { $gte: todayStart, $lte: todayEnd },
        },
      },
      { $group: { _id: null, total: { $sum: "$amount" } } },
    ]);

    // ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶Ü‡ßü/‡¶¨‡ßç‡¶Ø‡ßü
    const otherIncome = await OtherIncomeExpense.aggregate([
      {
        $match: {
          type: "income",
          date: { $gte: todayStart, $lte: todayEnd },
        },
      },
      { $group: { _id: null, total: { $sum: "$amount" } } },
    ]);

    const otherExpense = await OtherIncomeExpense.aggregate([
      {
        $match: {
          type: "expense",
          date: { $gte: todayStart, $lte: todayEnd },
        },
      },
      { $group: { _id: null, total: { $sum: "$amount" } } },
    ]);

    // ‡¶´‡¶æ‡¶á‡¶®‡¶æ‡¶≤ ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏
    res.json({
      totalLoanCollection: totalLoanCollection[0]?.total || 0,
      totalLoanDisbursed: totalLoanDisbursed[0]?.total || 0,
      totalFDRCollection: totalFDRCollection[0]?.total || 0,
      totalFDRWithdraw: totalFDRWithdraw[0]?.total || 0,
      totalFDRProfitWithdraw: totalFDRProfitWithdraw[0]?.total || 0,
      totalDPSCollection: totalDPSCollection[0]?.total || 0,
      totalDPSWithdraw: totalDPSWithdrawAgg[0]?.total || 0,
      totalCashToBank: totalCashToBank[0]?.total || 0,
      otherIncome: otherIncome[0]?.total || 0,
      otherExpense: otherExpense[0]?.total || 0,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
});


// ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ member balance report
app.get("/api/members-balance-report", async (req, res) => {
  try {
    const members = await Member.find();

    const report = await Promise.all(
      members.map(async (member) => {
        const memberId = member.memberId;

        // Loan collection ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶á member ‡¶è‡¶∞ ‡¶∏‡¶¨ loans
        const loans = await Loan.find({ memberId });

        // Loan balance & collection calculate
        let totalLoanGiven = 0;
        let totalLoanCollection = 0;
        loans.forEach((loan) => {
          totalLoanGiven += loan.initialLoanAmount || 0;
          loan.collections.forEach((c) => {
            totalLoanCollection += c.amount || 0;
          });
        });

        // DPS
        const dpsSettings = await DpsSetting.find({ memberId });
        let totalDPSDeposit = 0;
        let totalDPSBalance = 0;
        dpsSettings.forEach((dps) => {
          dps.collections.forEach((c) => {
            totalDPSDeposit += c.collectedAmount || 0;
            totalDPSBalance += c.balance || 0;
          });
        });

        // FDR
        const fdrSettings = await FdrSetting.find({ memberId });
        let totalFDRDeposit = 0;
        fdrSettings.forEach((fdr) => {
          totalFDRDeposit += fdr.fdrAmount || 0;
        });

        return {
          memberId,
          name: member.name,
          mobile: member.mobileNumber || "-",
          address: member.address || "-",
          totalLoanGiven,
          totalLoanCollection,
          totalDPSDeposit,
          totalDPSBalance,
          totalFDRDeposit,
          loans,
          dpsSettings,
          fdrSettings,
        };
      })
    );

    res.json(report);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
});

//‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø ‡¶ï‡¶æ‡¶≤‡ßá‡¶ï‡¶∂‡¶® ‡¶è‡¶∞ ‡¶ì‡¶™‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø ‡¶ï‡¶∞‡ßá ‡¶≤‡¶≠‡ßç‡¶Ø‡¶æ‡¶Ç‡¶∂ ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü
app.get("/api/installment-profit-report", async (req, res) => {
  try {
    const loans = await Loan.find({});
    const members = await Member.find({}); // ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ member fetch

    let report = [];
    let totalProfit = 0;
    let totalPrincipal = 0;

    for (let loan of loans) {
      // member info fetch
      const member = members.find(m => m.memberId === loan.memberId);

      for (let collection of loan.collections) {
        const collectionDate = new Date(collection.collectionDate);
        const interest = loan.totalLoan * (loan.dividend / 100);
        const principalReceived = collection.amount - interest;

        totalProfit += interest;
        totalPrincipal += principalReceived;

        report.push({
          date: collectionDate,
          type: "‡¶≤‡ßã‡¶® ‡¶ï‡¶ø‡¶∏‡ßç‡¶§‡¶ø",
          memberName: loan.name,
          mobileNumber: member?.mobileNumber || "-", // mobile number ‡¶Ø‡ßã‡¶ó
          amount: collection.amount,
          loanInterest: interest,
          principalReceived: principalReceived,
          totalProfit: interest,
          description: collection.description || "-",
        });
      }
    }

    res.json({ report, totalProfit, totalPrincipal });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: err.message });
  }
});



// üîπ Webhook (optional for get SMS reply)
app.post("/webhook/sms", async (req, res) => {
  console.log("üì® Webhook Received:", req.body);
  res.status(200).json({ message: "Webhook Received" });
});



// ‚úÖ Logo Schema
const logoSchema = new mongoose.Schema({
  title: String,
  logoUrl: String,
  orgName: String, // ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶ø‡¶≤‡ßç‡¶°
  address: String, // ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶ø‡¶≤‡ßç‡¶°
  date: String, // ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶ø‡¶≤‡ßç‡¶°
  mobileNumber: String, // ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶ø‡¶≤‡ßç‡¶°
});

const Logo = mongoose.model("Logo", logoSchema);

// ‚úÖ POST API (save logo info)
app.post("/api/logo", async (req, res) => {
  try {
    const { title, logoUrl, orgName, address, date, mobileNumber } = req.body;
    const newLogo = new Logo({ title, logoUrl, orgName, address, date, mobileNumber });
    await newLogo.save();
    res.status(200).json({ message: "‚úÖ Logo saved successfully!" });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "‚ùå Failed to save logo" });
  }
});

// get latest logo
app.get("/api/logo-get", async (req, res) => {
  try {
    const logos = await Logo.find().sort({ _id: -1 }).limit(1); // latest logo
    res.status(200).json(logos[0] || null);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "Failed to fetch logo" });
  }
});




/* ===================================================
   =============== Test Route ========================
   =================================================== */
app.get("/", (req, res) => {
  res.send("Somiti Backend Running ‚úÖ");
});

// ===== Start Server =====
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});
